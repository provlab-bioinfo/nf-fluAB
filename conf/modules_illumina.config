/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/



if(!params.skip_illumina_reads_qc){

    process{

    
        withName: INPUT_STATS {
            ext.prefix = { "${meta.id}.seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/input/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CONCAT_INPUT_STATS{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
        withName: CONCAT_TRIMMED_STATS {
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
        //dehost
        withName: HOSTILE{
            ext.args = '--force '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/dehost" },
                mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
            ]
        }
    
        withName: HOSTILE_STATS {
            ext.prefix = { "${meta.id}.dehost_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/dehost" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        
        withName: CONCAT_HOSTILE_STATS{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },  
            ]
        }
    }

    if(params.illumina_reads_qc_tool == 'fastp'){

        process {
            withName: FASTP {
                ext.args = [
                    "--cut_front",
                    "--cut_front_window_size=1",
                    "--cut_front_mean_quality=10",
                    "--cut_tail",
                    "--cut_tail_window_size=1",
                    "--cut_tail_mean_quality=10",
                    "--n_base_limit 0",
                    "--qualified_quality_phred 20",
                    "--average_qual 20",
                    "--length_required 50",
                    "--detect_adapter_for_pe"
                ].join(' ').trim()
                
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/qc/fastp" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            
            withName: TRIMMED_STATS {
                ext.prefix = { "${meta.id}.fastp_seqstats" }
                ext.args = '-Ta '
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/qc/fastp" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            
        }
    }
    
    if(params.illumina_reads_qc_tool == 'bbduk'){
        process {
            withName: BBMAP_BBDUK {
                ext.args = [
                    "ref=adapters,artifacts,phix",
                    "ktrim=r",
                    "k=23",
                    "mink=11",
                    "hdist=1",
                    "tpe",
                    "tbo",
                    "maq=15",
                    "trimq=10",
                    "qtrim=r",
                    "minlength=31",
                    "ref=${params.flu_primers}"
                ].join(' ').trim()
                
                ext.prefix = { "${meta.id}.bbduk_trim" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/qc/bbmap" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
                
            }
            

            withName: TRIMMED_STATS{
                ext.prefix = { "${meta.id}.bbduk_seqstats" }
                ext.args = '-Ta '
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/qc/bbmap" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}
/*
----------------------------------------------------------------------------------------
    mapping
----------------------------------------------------------------------------------------
*/
if(params.illumina_reads_mapping_tool == 'bwa'){
    process {
        withName: BWAMEM2_INDEX {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/mapping" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
        withName: BWAMEM2_MEM {
            //Mark shorter split hits as secondary (for Picard compatibility).
            ext.args = "-M "

            publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
            
            //ext.args2 = " -h -F260 "
        }
    }
}
if(params.illumina_reads_mapping_tool == 'minimap2'){
    process {
        withName: MINIMAP2_ALIGN {
            ext.args = " -x sr "
            publishDir = [
                path: { "${params.outdir}/${meta.id}/mapping" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
    }
}
/*
    ----------------------------------------------------------------------------------------
        variants
    ----------------------------------------------------------------------------------------
*/
if(params.illumina_variant_caller == 'freebayes'){
    
    process{

        //variant callers like GATK or freebayes  ignore soft/hard clipped alignments, unless looking for structural variants.
        /*
        from  a forumI use -p 2 for a good reason. If you use -p 1 then mismapping reads will cause false +ve SNP calls. If you assume haploid, and you get REF=70xA and ALT=30xT then freebayes is going to call ALT, as it certainly isn't REF under a haploid model, but we've given it no chance to say it's mixed. Diploid gives this chance. Some SNP callers for bacteria (eg. nesoni) used even higher ploidy to help here.I learnt this lesson the hard way in Snippy 3.x
        I tested 1 and 2 but the results are similar
        */
        withName: FREEBAYES {
            ext.args = [
                "--ploidy 1", \
                "--haplotype-length -1", \
                "--min-mapping-quality 10", \
                "--min-base-quality 10", \
                "--min-coverage 2", \
                // "--min-alternate-fraction 0.2",\
                // "--min-alternate-count 2",\
                "--pooled-continuous",\
                "--gvcf"
                //"--gvcf-dont-use-chunk true"
                //"--min-coverage ${params.mindepth}"\
            ].join(' ').trim()

            ext.prefix =  {"${meta.id}.freebayes"}

            publishDir = [
                path: { "${params.outdir}/${meta.id}/variants" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }

        withName: BCFTOOLS_SORT{
            ext.args = " --output-type z "
            ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/variants" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                //enabled: false
            ]
        }
        withName: TABIX_BGZIPTABIX{
            ext.args2 = " -f -p vcf "
            publishDir = [
                path: { "${params.outdir}/${meta.id}/variants" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                //enabled: false
            ]
        }
        
    }
}
if(params.illumina_variant_caller == 'bcftools'){
    process{

        withName: 'BCFTOOLS_MPILEUP' {
            
            ext.args = [
                "--min-BQ 10",
                "--ignore-overlaps",
                "--count-orphans", // anomalous read pairs" or "orphans". Those are paired reads where the mate is not paired. 
                "--no-BAQ",
                "-M 10000",
                "-h 100",
                "--max-depth 1000000", //this value affect DP 
                "--max-idepth 100000",
                "--annotate FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,INFO/AD,INFO/ADF,INFO/ADR"
            ].join(" ").trim()

            //By setting ploidy to 1, the call algorithm is told to look for a single allele. The default ploidy 2 is able to detect maximum two alleles.
            ext.args2 = [
                "--ploidy 2",
                "--keep-alts", //output all alternate alleles present in the alignments even if they do not appear in any of the genotypes
                "--keep-masked-ref", //output sites where REF allele is N
                "--multiallelic-caller",
                "--keep-unseen-allele" // useful mainly for gVCF output
                //"--variants-only"
            ].join(' ').trim()
            
            ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}" }

            publishDir = [
                path: { "${params.outdir}/${meta.id}/variants" },
                mode: params.publish_dir_mode,
                pattern: "*.{vcf.gz,vcf.gz.tbi,bcftools_stats.txt}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                //enabled: false
            ]
        }
        
    }
}

process{

    
    withName: SAMTOOLS_SORT {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    
    }
    
    
    withName: SAMTOOLS_COVERAGE_MAPPING {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.coverage" }
        ext.args = " -d 0 "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        pre-procesess bam
    ----------------------------------------------------------------------------------------
    */
    withName: SAMTOOLS_FILTER {
        /*
        exclude alignments:
            read unmapped (0x4)
            mate unmapped (0x8)
            not primary alignment (0x100)
            supplementary alignment (0x800) 
        */
        ext.args = " -h -F 2316 -b --output-fmt bam --write-index"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rm_sec_sup" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bai}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
        ]
        
    }
    
    
    withName: SAMTOOLS_VIEW_BAM2SAM {
        //exclude secondary and supplimentary alignments
        ext.args = " -h --output-fmt sam"
        //ext.prefix = { "${meta.id}.rm_secondary_supplementary" }
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rm_sec_sup" }
        publishDir = [
        path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
        ]
    }
    withName: SAMCLIP {
        ext.args = " --debug --max 0 --max_edge 0 "
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
        
        ]
    }
    withName: SAMTOOLS_SORT_SAMCLIP {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.samclip.sorted" }
        publishDir = [
        path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
            
        ]
        //ext.prefix = { "${meta.id}.samclip.sorted" }
    
    }
    
    withName: SAMTOOLS_COVERAGE_SAMCLIP {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.samclip.coverage" }
        ext.args = " -d 0 "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
    }
    //remove duplicates
    withName: PICARD_MARKDUPLICATES {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rmdup" }
        //ext.args = '--ASSUME_SORT_ORDER coordinate --REMOVE_SEQUENCING_DUPLICATES true --REMOVE_DUPLICATES true --CREATE_INDEX true'
        ext.args = [
            "--ASSUME_SORT_ORDER coordinate",
            "--REMOVE_SEQUENCING_DUPLICATES true",
            "--REMOVE_DUPLICATES true ",
            "--CREATE_INDEX true",
            "--VALIDATION_STRINGENCY LENIENT"
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            pattern: "*.{bam,bai}",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
    }

    withName: SAMTOOLS_COVERAGE_RMDUP {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rmdup.coverage" }
        ext.args = " -d 0 "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
    }

    //produce bed file with low depth region of the reference 
    withName: BEDTOOLS_GENOMECOV_LOWDEPTH {
        ext.args = "-bga  | awk \'\$4 < ${params.mindepth}\' "
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.lowdepth" }
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BEDTOOLS_GENOMECOV_PERBASE {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.perbase" }
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM_PERBASE {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            
        ]
    }
    withName: BEDTOOLS_GENOMECOV_PERBASE_RM_SEC_SUP {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rm_sec_sup.perbase"}
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM_PERBASE_RM_SEC_SUP {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rm_sec_sup.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BEDTOOLS_GENOMECOV_PERBASE_SAMCLIP {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.samclip.perbase"}
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM_PERBASE_SAMCLIP {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.samclip.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BEDTOOLS_GENOMECOV_PERBASE_RMDUP {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rmdup.perbase"}
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM_PERBASE_RMDUP {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rmdup.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PLOT_DEPTH_INPUT {
        //ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}" }
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PLOT_DEPTH_RM_SEC_SUP {
        //ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rm_sec_sup" }
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PLOT_DEPTH_SAMCLIP {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.samclip" }
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: PLOT_DEPTH_RMDUP {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}.rmdup" }
    
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    /*
    ----------------------------------------------------------------------------------------
        consensus
    ----------------------------------------------------------------------------------------
    */
    withName: BCFTOOLS_NORM{
        ext.args = "--check-ref w --output-type z  --write-index=tbi"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.norm" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: TABIX_BGZIPTABIX{
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.setGT" }
        ext.args2 = " -f -p vcf "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
        ]
    }
    
    withName: 'SETGT' {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}" }
        ext.args = "-l 0.25 -u 0.75 -d 10"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    
    withName: BCFTOOLS_CONSENSUS{
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}" }
        ext.args = "--iupac-codes --mark-del '-' --mark-ins lc --mark-snv lc"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: true
        ]
    }
    withName: SEQKIT_FX2TAB_REFORMAT {
        ext.args = '--length -C N -H -Q'
        ext.suffix = 'txt'
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.consensus" }

        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: false
        ]
    }
    withName: CONSENSUS_REHEADER {
        ext.args = "--cov ${params.cov}"
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}" }

        publishDir = [   
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: false
        ]
    } 
    withName: SEQKIT_TAB2FX {
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}" }
        ext.suffix = 'fasta'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: false
        ]
    }
    withName: SEQKIT_SORT {
        //ext.prefix = {"${meta.id}.consensus"}
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.consensus" }

        publishDir = [   
            path: { "${params.outdir}/${meta.id}/consensus" },
            mode: params.publish_dir_mode,
            pattern: "*.{fasta.gz,fasta}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    } 
    //get stats
    withName: SEQKIT_FX2TAB_CONSENSUS {
        ext.args = '--only-id --name --length -C ATCG -C RYSWKMBDHV -C N -H'                                       
        ext.suffix = 'txt'
        //ext.prefix = { "${meta.id}.bcftools_consensus_stats" }
        ext.prefix = { "${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.consensus_stats" }
        publishDir = [   
            path: { "${params.outdir}/${meta.id}/consensus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        classifier: blast typing
    ----------------------------------------------------------------------------------------
    */
    withName: BLAST_BLASTN {
        ext.args = "-max_target_seqs 1 -outfmt '6 std qlen slen qcovs' -perc_identity ${params.minblastident} -qcov_hsp_perc ${params.minblastcov} "
        ext.prefix = {"${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.blastn"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/typing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]

    }
    withName: CSVTK_ADD_HEADER_BLASTN {
        ext.prefix = {"${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.typing"}
        ext.args = "-t -H "
        publishDir = [   
            path: { "${params.outdir}/${meta.id}/typing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    
        
    }
    withName: CONCAT_TYPING{
        ext.prefix = {"${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.typing"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
    
    /*
    ----------------------------------------------------------------------------------------
        classifier: nextclade
    ----------------------------------------------------------------------------------------
    */
    withName: SEGMENT2DATASET {
        ext.prefix = {"${params.illumina_reads_mapping_tool}-${params.illumina_variant_caller}"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nextclade" },
            mode: params.publish_dir_mode,
            pattern: "*.{seg2typedata.tsv}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    } 
    withName: NEXTCLADE_RUN {
        //ext.prefix = {"${meta.id}.nextclade"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nextclade" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv,dbname.txt}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
        
    }
    withName: CONCAT_NEXTCLADE{
        ext.prefix = {"${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.nextclade"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        report
    ----------------------------------------------------------------------------------------
    */
    withName: CONSENSUS_REPORT {
        
        ext.prefix = {"${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.consensus_summary"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CONCAT_CONSENSU_REPORT{
        ext.prefix = {"${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.consensus_summary"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }

}


