
if(!params.skip_nanopore_reads_qc){
    process {

        /*
        ----------------------------------------------------------------------------------------
            QC
        ----------------------------------------------------------------------------------------
        */
        
        withName: INPUT_STATS {
            ext.prefix = { "${meta.id}.seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/input/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CONCAT_INPUT_STATS{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }
        withName: PORECHOP_PORECHOP {   
            ext.prefix = { "${meta.id}.porechop" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/qc/porechop" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: PORECHOP_STATS {
            ext.prefix = { "${meta.id}.porechop_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/qc/porechop" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CONCAT_PORECHOP_STATS{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }, 
            ]
        }
        withName: CHOPPER {   
            ext.args2 = "-q 10 --minlength 500"
            ext.prefix = { "${meta.id}.chopper" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/qc/chopper" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CHOPPER_STATS {
            ext.prefix = { "${meta.id}.chopper_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/qc/chopper" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CONCAT_CHOPPER_STATS{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },  
            ]
        }

        //dehost
        withName: HOSTILE{
            ext.args = '--force '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/dehost" },
                mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
            ]
        }
        withName: HOSTILE_STATS {
            ext.prefix = { "${meta.id}.dehost_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/dehost" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        
        withName: CONCAT_HOSTILE_STATS{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },  
            ]
        }
    }
}

process{

    /*
    ----------------------------------------------------------------------------------------
        mapping
    ----------------------------------------------------------------------------------------
    */
    if(params.nanopore_reads_mapping_tool == 'minimap2'){
        process {
            withName: MINIMAP2_ALIGN {
                ext.args = " -x map-ont "
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/mapping" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: false
                ]
            }
            //mapping summary
            withName: SAMTOOLS_SORT {
                ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.sorted" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/mapping" },
                    mode: params.publish_dir_mode,

                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: SAMTOOLS_INDEX {
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/mapping" },
                    mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: SAMTOOLS_COVERAGE_MAPPING {
                ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.coverage" }
                ext.args = " -d 0 "
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/mapping" },
                    mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
                ]
            }

        }
    }

    /*
    ----------------------------------------------------------------------------------------
        pre-procesess bam
    ----------------------------------------------------------------------------------------
    */
    withName: SAMTOOLS_VIEW_RM_SEC_SUP {
        //exclude secondary and supplimentary alignments
        ext.args = " -h -F0x900 -b --output-fmt bam --write-index"
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rm_sec_sup" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
        ]
        
    }
     withName: SAMTOOLS_INDEX_RM_SEC_SUP {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            pattern: "*.{bai}",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
        
    }
    withName: SAMTOOLS_COVERAGE_RM_SEC_SUP {
        //ext.prefix = { "${meta.id}.clean.coverage" }
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rm_sec_sup.coverage" }
        ext.args = " -d 0 "
        publishDir = [
           path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
    }
     withName: SAMTOOLS_VIEW_BAM2SAM {
        //exclude secondary and supplimentary alignments
        ext.args = " -h --output-fmt sam"
        //ext.prefix = { "${meta.id}.rm_secondary_supplementary" }
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rm_sec_sup" }
        publishDir = [
           path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
        ]
    }
    withName: SAMCLIP {
        ext.args = " --debug --max 0 --max_edge 25 "
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
        
        ]
    }
    withName: SAMTOOLS_SORT_SAMCLIP {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.samclip.sorted" }
        publishDir = [
           path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            //enabled: false
            
        ]
        //ext.prefix = { "${meta.id}.samclip.sorted" }
       
    }
    withName: SAMTOOLS_INDEX_SAMCLIP {
        publishDir = [
        path: { "${params.outdir}/${meta.id}/mapping" },
            pattern: "*.{bai}",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
    }
    withName: SAMTOOLS_COVERAGE_SAMCLIP {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.samclip.coverage" }
        ext.args = " -d 0 "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
    }
    //remove duplicates
    withName: PICARD_MARKDUPLICATES {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rmdup" }
        ext.args = '--ASSUME_SORT_ORDER coordinate --REMOVE_SEQUENCING_DUPLICATES true --REMOVE_DUPLICATES true'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            pattern: "*.{bam,bai}",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
    }
   
    withName: SAMTOOLS_COVERAGE_RMDUP {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rmdup.coverage" }
        ext.args = " -d 0 "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
        ]
    }

    //produce bed file with low depth region of the reference 
    withName: 'BEDTOOLS_GENOMECOV_LOWDEPTH' {
        ext.args = "-bga  | awk \'\$4 < ${params.mindepth}\' "
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.lowdepth" }
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: BEDTOOLS_GENOMECOV_PERBASE {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.perbase" }
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM_PERBASE {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BEDTOOLS_GENOMECOV_PERBASE_RM_SEC_SUP {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.perbase_rm_sec_sup"}
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM_PERBASE_RM_SEC_SUP {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rm_sec_sup.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BEDTOOLS_GENOMECOV_PERBASE_SAMCLIP {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.perbase_samclip"}
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM_PERBASE_SAMCLIP {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.samclip.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BEDTOOLS_GENOMECOV_PERBASE_RMDUP {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.perbase_rmdup"}
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM_PERBASE_RMDUP {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rmdup.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PLOT_DEPTH_INPUT {
        //ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}" }
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PLOT_DEPTH_RM_SEC_SUP {
        //ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rm_sec_sup" }
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PLOT_DEPTH_SAMCLIP {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.samclip" }
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: PLOT_DEPTH_RMDUP {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}.rmdup" }
       
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        consensus
    ----------------------------------------------------------------------------------------
    */
       
    withName: BCFTOOLS_NORM_BIALLELIC{
        ext.args = '-m- --check-ref w --output-type z --write-index=tbi'
        //ext.prefix = {"${meta.id}.biallelic"}
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.biallelic" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
   
    withName: BCFTOOLS_VIEW{
        ext.args = "--write-index=tbi -c 1:major -e 'FORMAT/DP < ${params.mindepth} || FORMAT/AD[:1]/FORMAT/DP < ${params.lower_ambiguity_freq}'"
        //ext.prefix = {"${meta.id}.biallelic-filtered"}
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.biallelic-filtered" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    
    withName: BCFTOOLS_NORM_MULTIALLELIC{
        ext.args = '-m+ --check-ref w --output-type v'
        //ext.prefix = {"${meta.id}.multiallelic-filtered"}
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.multiallelic-filtered"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: 'BCFTOOLS_SETGT' {
        
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}" }
        ext.args    = "-Ou -- -t q -i 'strlen(ref) !=strlen(alt) && FORMAT/AD[:1]/FORMAT/DP >= ${params.upper_ambiguity_freq}' -n 'c:1/1'"
        ext.args2   = "-Ou -- -t q -i 'strlen(ref) !=strlen(alt) && FORMAT/AD[:1]/FORMAT/DP <  ${params.lower_ambiguity_freq}' -n 'c:0/0'"
        ext.args3   = "-Ou -- -t q -i 'GT !~ \"/\"  && FORMAT/AD[:1]/FORMAT/DP <  ${params.upper_ambiguity_freq} && FORMAT/AD[:0]/FORMAT/DP >=  ${params.lower_ambiguity_freq}' -n 'c:0/1'"
        ext.args4   = "-Oz --write-index=tbi -- -t q -i 'GT !~ \"/\"'  -n 'c:1/1'"

        publishDir = [
           path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    
    withName: BCFTOOLS_CONSENSUS{
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}" }
        ext.args = "--iupac-codes --mark-del '-' --mark-ins lc --mark-snv lc"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: true
        ]
    }
    withName: SEQKIT_FX2TAB_REFORMAT {
        ext.args = '--length -C N -H -Q'
        ext.suffix = 'txt'
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.consensus" }

        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: false
        ]
    }
    withName: CONSENSUS_REHEADER {
        ext.args = "--cov ${params.cov}"
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}" }

        publishDir = [   
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: false
        ]
    } 
    withName: SEQKIT_TAB2FX {
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}" }
        ext.suffix = 'fasta'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: false
        ]
    }
    withName: SEQKIT_SORT {
        //ext.prefix = {"${meta.id}.consensus"}
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.consensus" }

        publishDir = [   
            path: { "${params.outdir}/${meta.id}/consensus" },
            mode: params.publish_dir_mode,
            pattern: "*.{fasta.gz,fasta}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    } 
    //get stats
    withName: SEQKIT_FX2TAB_CONSENSUS {
        ext.args = '--only-id --name --length -C ATCG -C RYSWKMBDHV -C N -H'                                       
        ext.suffix = 'txt'
        //ext.prefix = { "${meta.id}.bcftools_consensus_stats" }
        ext.prefix = { "${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.consensus_stats" }
        publishDir = [   
            path: { "${params.outdir}/${meta.id}/consensus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
     /*
    ----------------------------------------------------------------------------------------
        classifier: blast typing
    ----------------------------------------------------------------------------------------
    */
     withName: BLAST_BLASTN {
        ext.args = "-max_target_seqs 1 -outfmt '6 std qlen slen qcovs' -perc_identity ${params.minblastident} -qcov_hsp_perc ${params.minblastcov} "
        ext.prefix = {"${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.blastn"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/typing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]

    }
    withName: CSVTK_ADD_HEADER_BLASTN {
        ext.prefix = {"${meta.id}-${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.typing"}
        ext.args = "-t -H "
        publishDir = [   
            path: { "${params.outdir}/${meta.id}/typing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
       
        
    }
    withName: CONCAT_TYPING{
        ext.prefix = {"${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.typing"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
    
    /*
    ----------------------------------------------------------------------------------------
        classifier: nextclade
    ----------------------------------------------------------------------------------------
    */
    withName: SEGMENT2DATASET {
        ext.prefix = {"${params.nanopore_reads_mapping_tool}-${params.nanopore_variant_caller}"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nextclade" },
            mode: params.publish_dir_mode,
            pattern: "*.{seg2typedata.tsv}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    } 
    withName: NEXTCLADE_RUN {
        //ext.prefix = {"${meta.id}.nextclade"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nextclade" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
        
    }
    withName: CONCAT_NEXTCLADE{
        ext.prefix = {"${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.nextclade"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }

     /*
    ----------------------------------------------------------------------------------------
        report
    ----------------------------------------------------------------------------------------
    */
    withName: CONSENSUS_REPORT {
        ext.prefix = {"${meta.id}-${params.illumina_reads_mapping_tool}_${params.illumina_variant_caller}.consensus_summary"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CONCAT_CONSENSU_REPORT{
        ext.prefix = {"${params.nanopore_reads_mapping_tool}_${params.nanopore_variant_caller}.consensus_summary"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
   
}
/*
    ----------------------------------------------------------------------------------------
        variants
    ----------------------------------------------------------------------------------------
*/

if(params.nanopore_variant_caller == 'clair3'){   
    process{

        //variant callers like GATK or freebayes  ignore soft/hard clipped alignments, unless looking for structural variants.

        withName: CLAIR3 {
            ext.args = [
                "--platform=\"ont\"",
                "--gvcf",
                "--chunk_size=2500",
                "--haploid_sensitive",
                "--enable_long_indel",
                "--keep_iupac_bases",
                "--fast_mode",
                "--include_all_ctgs",
                " --no_phasing_for_fa",
                "--min_coverage=${params.mindepth}"
                ].join(' ').trim()
            
            publishDir = [
                path: { "${params.outdir}/${meta.id}/variants" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.{vcf.gz,log}",
                //enabled: false
                ]
        }

        withName: TABIX_TABIX_VCF{
            publishDir = [
                path: { "${params.outdir}/${meta.id}/variants" },
                mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
            ]
        }
        
    }
}


