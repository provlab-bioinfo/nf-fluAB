process {

    /*
    ----------------------------------------------------------------------------------------
        QC
    ----------------------------------------------------------------------------------------
    */
    
    withName: PORECHOP_PORECHOP {   
        ext.prefix = { "${meta.id}.porechop" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/qc/porechop" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PORECHOP_STATS {
        ext.prefix = { "${meta.id}.porechop_seqstats" }
        ext.args = '-Ta '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/qc/porechop" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CONCAT_PORECHOP_STATS{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }, 
        ]
    }
    withName: CHOPPER {   
        ext.args2 = "-q 10 --minlength 500"
        ext.prefix = { "${meta.id}.chopper" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/qc/chopper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CHOPPER_STATS {
        ext.prefix = { "${meta.id}.chopper_seqstats" }
        ext.args = '-Ta '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/qc/chopper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CONCAT_CHOPPER_STATS{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },  
        ]
    }

    //dehost
    withName: HOSTILE{
        
        ext.args = "--force --aligner-args '-ax map-ont'"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/dehost" },
            mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: true
        ]
    }
    
    /*
    ----------------------------------------------------------------------------------------
        Mapping
    ----------------------------------------------------------------------------------------
    */

    withName: MINIMAP2_ALIGN {
        ext.args = " --cs --MD -aLx map-ont --secondary=no"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        variants
    ----------------------------------------------------------------------------------------
    */


    //variant callers like GATK or freebayes  ignore soft/hard clipped alignments, unless looking for structural variants.

    withName: CLAIR3 {
        /*  ext.args = [
            "--platform=\"ont\"",
            "--chunk_size=2500",
            "--haploid_sensitive",
            "--enable_long_indel",
            "--keep_iupac_bases",
            //"--fast_mode",
            "--include_all_ctgs",
            " --no_phasing_for_fa",
            "--min_coverage=2"
            ].join(' ').trim() */
        
        ext.args = [
            "--platform=\"ont\"",
            //"--haploid_sensitive", //consider heterozygous alike positions as variant.
            "--haploid_precise", // consider heterozygous alike positions as non-variant, precise to sensitive cause the deletion in the consensus 
            "--enable_long_indel",
            "--keep_iupac_bases",
            "--include_all_ctgs",
            " --no_phasing_for_fa",
            "--min_coverage=${params.mindepth}",
            "--min_mq=30",
            "--base_err=0.05",
            "--var_pct_full=1",
            "--ref_pct_full=1",
            "--var_pct_phasing=1"
            ].join(' ').trim()

        // ext.args = [
        //     "--platform=\"ont\"",
        //     "--include_all_ctgs",
        //     "--haploid_precise",
        //     " --no_phasing_for_fa",
        //     "--enable_long_indel"
        //     ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{vcf.gz,log,gvcf.gz,gvcf.gz.tbi}",
            //enabled: false
            ]
    }
   
}



